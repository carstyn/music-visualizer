import pygame
import librosa
import numpy as np
import tkinter as tk
from tkinter import filedialog
import os

def select_audio_file():
    """Open a file dialog to select an MP3 or WAV file."""
    root = tk.Tk()
    root.withdraw()  # Hide the main window
    file_path = filedialog.askopenfilename(
        title="Select an Audio File",
        filetypes=[("Audio Files", "*.mp3 *.wav")]
    )
    root.destroy()
    if not file_path or not os.path.exists(file_path):
        print("No file selected or file does not exist.")
        return None
    return file_path

def load_audio(audio_file):
    """Load audio file, compute RMS amplitude, and detect beats."""
    try:
        y, sr = librosa.load(audio_file)
        rms = librosa.feature.rms(y=y)[0]
        rms = rms / np.max(rms)
        duration = librosa.get_duration(y=y, sr=sr)
        # Beat detection
        tempo, beat_frames = librosa.beat.beat_track(y=y, sr=sr)
        beat_times = librosa.frames_to_time(beat_frames, sr=sr)
        print(f"Loaded audio with {len(rms)} RMS samples, duration {duration}s, {len(beat_times)} beats detected")
        return rms, duration, beat_times
    except Exception as e:
        print(f"Error loading audio: {e}")
        return None, None, None

def init_pygame():
    """Initialize Pygame and return screen and font."""
    pygame.init()
    WIDTH, HEIGHT = 800, 600
    screen = pygame.display.set_mode((WIDTH, HEIGHT))
    pygame.display.set_caption("Interactive Music Visualizer")
    font = pygame.font.SysFont("arial", 24)
    return screen, font, WIDTH, HEIGHT

def reload_audio(audio_file, is_playing):
    """Reload audio file and reset playback."""
    try:
        pygame.mixer.music.load(audio_file)
        if is_playing:
            pygame.mixer.music.play()
        print(f"Reloaded audio: {audio_file}")
        rms, duration, beat_times = load_audio(audio_file)
        return rms, duration, beat_times
    except Exception as e:
        print(f"Error reloading audio: {e}")
        return None, None, None

def draw_visuals(screen, rms, frame_index, beat_times, current_time, width, height, color):
    """Draw pulsing circle with beat flash effect."""
    amplitude = rms[frame_index]
    radius = 50 + amplitude * 200
    # Check if current time is near a beat (within 0.1s)
    is_beat = any(abs(current_time - bt) < 0.1 for bt in beat_times)
    # Flash on beat by filling circle; otherwise, outline
    if is_beat:
        pygame.draw.circle(screen, color, (width // 2, height // 2), int(radius), 0)  # Filled
    else:
        pygame.draw.circle(screen, color, (width // 2, height // 2), int(radius), 2)  # Outline

def draw_ui(screen, font, is_playing, color_theme_name, audio_file):
    """Render UI elements (title, playback status, color theme, button)."""
    title_text = font.render("Music Visualizer", True, (255, 255, 255))
    screen.blit(title_text, (10, 10))
    filename = os.path.basename(audio_file) if audio_file else "None"
    status_text = font.render(f"{'Playing' if is_playing else 'Paused'}: {filename}", True, (255, 255, 255))
    screen.blit(status_text, (10, 40))
    theme_text = font.render(f"Theme: {color_theme_name}", True, (255, 255, 255))
    screen.blit(theme_text, (10, 70))
    
    # Change Audio button
    button_text = font.render("Change Audio", True, (255, 255, 255))
    button_rect = pygame.Rect(10, 100, 150, 40)
    pygame.draw.rect(screen, (50, 50, 50), button_rect)  # Button background
    screen.blit(button_text, (15, 110))
    return button_rect

def main():
    """Main function to run the visualizer."""
    # Select initial audio file
    audio_file = select_audio_file()
    if not audio_file:
        print("Exiting due to no audio file selected.")
        return

    # Initialize Pygame
    screen, font, WIDTH, HEIGHT = init_pygame()
    clock = pygame.time.Clock()

    # Color themes
    color_themes = [
        {"name": "Blue", "color": (0, 100, 255)},
        {"name": "Red", "color": (255, 50, 50)},
        {"name": "Green", "color": (50, 255, 50)},
    ]
    current_theme = 0

    # Load initial audio
    rms, duration, beat_times = load_audio(audio_file)
    if rms is None or duration is None:
        pygame.quit()
        return

    # Set up initial audio playback
    try:
        pygame.mixer.music.load(audio_file)
        pygame.mixer.music.play()
    except Exception as e:
        print(f"Error playing audio: {e}")
        pygame.quit()
        return

    # Initialize variables
    time_per_frame = duration / len(rms)  # Seconds per RMS sample
    is_playing = True
    current_time = 0
    frame_index = 0

    # Main loop
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    running = False
                elif event.key == pygame.K_SPACE:  # Pause/resume
                    if is_playing:
                        pygame.mixer.music.pause()
                        is_playing = False
                    else:
                        pygame.mixer.music.unpause()
                        is_playing = True
                elif event.key == pygame.K_1:  # Switch to theme 1
                    current_theme = 0
                elif event.key == pygame.K_2:  # Switch to theme 2
                    current_theme = 1
                elif event.key == pygame.K_3:  # Switch to theme 3
                    current_theme = 2
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if button_rect.collidepoint(event.pos):  # Clicked Change Audio button
                    new_audio_file = select_audio_file()
                    if new_audio_file:
                        audio_file = new_audio_file
                        pygame.mixer.music.stop()
                        new_rms, new_duration, new_beat_times = reload_audio(audio_file, is_playing)
                        if new_rms is not None:
                            rms, duration, beat_times = new_rms, new_duration, new_beat_times
                            time_per_frame = duration / len(rms)
                            current_time = 0
                            frame_index = 0

        # Update time and frame (only if playing)
        if is_playing:
            current_time += 1 / 60  # Assuming 60 FPS
            frame_index = min(int(current_time / time_per_frame), len(rms) - 1)

        # Clear screen
        screen.fill((0, 0, 0))  # Black background

        # Draw visuals and UI
        draw_visuals(screen, rms, frame_index, beat_times, current_time, WIDTH, HEIGHT, color_themes[current_theme]["color"])
        button_rect = draw_ui(screen, font, is_playing, color_themes[current_theme]["name"], audio_file)

        # Update display
        pygame.display.flip()
        clock.tick(60)

    # Cleanup
    pygame.mixer.music.stop()
    pygame.quit()

if __name__ == "__main__":
    main()