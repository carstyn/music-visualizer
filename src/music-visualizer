import pygame
import librosa
import numpy as np

# Initialize Pygame
pygame.init()
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Interactive Music Visualizer")
clock = pygame.time.Clock()

# Load audio file
audio_file = "example-audio.mp3"  # Replace with name of MP3 or WAV file in src folder
try:
    y, sr = librosa.load(audio_file)  # Load audio waveform and sample rate
except Exception as e:
    print(f"Error loading audio: {e}")
    pygame.quit()
    exit()

# Compute amplitude for visualization
rms = librosa.feature.rms(y=y)[0]
rms = rms / np.max(rms)  # Normalize for scaling visuals
duration = librosa.get_duration(y=y, sr=sr)
time_per_frame = duration / len(rms)  # Seconds per RMS sample
print(f"Loaded audio with {len(rms)} RMS samples, duration {duration}s")

# Set up audio playback
try:
    pygame.mixer.music.load(audio_file)
    pygame.mixer.music.play()
except Exception as e:
    print(f"Error playing audio: {e}")
    pygame.quit()
    exit()

# Colors
WHITE = (255, 255, 255)
BLUE = (0, 100, 255)

# Font for UI
font = pygame.font.SysFont("arial", 24)

# Main loop
running = True
current_time = 0
frame_index = 0
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                running = False

    # Update current time and frame for audio-visual sync
    current_time += 1 / 60  # Assuming 60 FPS
    frame_index = min(int(current_time / time_per_frame), len(rms) - 1)

    # Clear screen
    screen.fill((0, 0, 0))  # Black background

    # Get amplitude and scale circle radius
    amplitude = rms[frame_index]
    radius = 50 + amplitude * 200  # Base radius + scaled amplitude

    # Draw pulsing circle
    pygame.draw.circle(screen, BLUE, (WIDTH // 2, HEIGHT // 2), int(radius), 2)

    # Draw UI elements
    # Title
    title_text = font.render("Music Visualizer", True, WHITE)
    screen.blit(title_text, (10, 10))
    # Playback status
    status_text = font.render("Playing", True, WHITE)
    screen.blit(status_text, (10, 40))

    # Update display
    pygame.display.flip()
    clock.tick(60)

# Cleanup
pygame.mixer.music.stop()
pygame.quit()